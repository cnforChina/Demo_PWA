/** \page example Example Analysis

\section exintro Introduction to GPUPWA by a Sample Analysis

To get you aquainted with GPUPWA, we have prepared a sample analysis
of the channel \f$ J/\psi \longrightarrow \gamma K^{+}K^{-}\f$, which
presents the GPUPWA interface and often used constructs. A version of
this analysis including the corresponding makefile should be located in
the /GammaKK directory of your GPUPWA installation. In the present 
document, the code is frequently interrupted for detailed explanantions.

\section exheaders Before the start

First we include some headers from the GPUPWA package. In the future,
this might be simplifyied to a single header.
\code
#include "../GPUPWA/GPUStreamTensor.h"
#include "../GPUPWA/GPUComputedTensor.h"
#include "../GPUPWA/GPUFactorizedRadiativePartialWave.h"
#include "../GPUPWA/GPUMetricTensor.h"
#include "../GPUPWA/GPUOrbitalTensors.h"
#include "../GPUPWA/GPUPropagatorBreitWigner.h"
#include "../GPUPWA/GPUPartialWaveAnalysis.h"
#include "../GPUPWA/GPUPWAAmplitudeCalculator.h"
#include "../GPUPWA/GPUStreamInputRootFileVector.h"
#include "../GPUPWA/GPUStreamInputTextFileVector.h"
#include "../GPUPWA/GPUPlotset.h"
\endcode

We also need some stuff from root
\code
#include "TFile.h"
#include "TRandom3.h"
\endcode

And some general C/C++ stuff
\code
#include <ctime>
#include <iomanip>
#include <fstream>
#include <iostream>
#include <string>
\endcode

We explicitly specify what we want to use from namespace std; this is not strictly necessary, but keeps things nice and tidy.
In a future version, we might actually move GPUPWA into ints own namespace.
\code
using std::cout;
using std::endl;
\endcode


\section exmain Main Program, the beginnings

The example main program does not require arguments; specifying a configuration file on the 
command line would however be straightforward.

\code

int main(int argc, char* argv[])
{
\endcode 
We will want to do some timing measurements, thus start the clock
\code
	clock_t start = clock();
\endcode
Say Hello to our user
\code
	cout << "Gamma KK partial wave analysis huaning ni!" << endl << endl;;
\endcode

\section exsetup Setting up the analysis

Here we start: Create a GPUPartialWaveAnalysis Object.  As parameters we give a name, a filename  and the number of file types we want to use (in this case 2, namely data and the phase space Monte Carlo). If you need additional input, e.g. different MC for systematic studies, increase that number. The specified file should contain the following entries:
	ParameterFile = \<Name of file with fit parameter starting values (usually called para.inp)\>
	ResonanceFile = \<Name of file with resonance masses and widths (usually called res.inp)\>
	DataFile = \<Name of the file with the inputs for data\>
	MCFile1 = \<Name of the file with the inputs for MC (first set)\>
	if the third argument is larger than 2, add MCFile2, MCFile3 etc. entries.
This file allows you to run many different configurations of the analysis without recompiling. If you are interested in performing scans from the command line, see the PiPiPi example code.
\code
	GPUPartialWaveAnalysis * myanalysis = 
					      new GPUPartialWaveAnalysis("Gamma KK Analysis","files.txt",2);
\endcode
 For now we will store and use MC at index 1
\code
	myanalysis->SetMCIndex(1);
\endcode

Next we will start building up the partial wave amplitudes from the particle momenta

Convention used: Vectors \f$ p_{\mu}\f$ (lower index) start in small letters, Covectors \f$ p^{\mu} \f$ (upper index) with capitals
For Tensors, the indices are given (T_mn for \f$ T_{\mu\nu} \f$), again capitals for upper indices, small letters for lower indices
The metric Tensor \f$ g_{\mu\nu} = g^{\mu\nu}\f$ stays the same, so is always called g 

Note that all the following statements will not read files or perform calculations. They merey set up a framework such
that as soon as some calculated quantity is needed, it can be computed using the power of the GPU

\section exinput Input: Four vectors of the two Kaons

Here we create two GPUStreamInputRootFileVector objects. The constructor takes the following arguments: The GPUPartialWaveAnalysis
they will be used in. This is needed for the caching mechanism to work. Then we give the name of the root file for the data 
(here taken from the analysis objects, which in turn reads it from the input file at construction),
the name of the root tree and the names of the branches in the tree conatining the momentum compnents and the energy.
Alternatively, text files can be used, see GPUStreamInputTextFileVector. Note that we are working with refernces, thus we do not have to
check for NULL pointers in subsequent steps.
\code
	GPUStreamInputRootFileVector & k_plus = 
				     * new GPUStreamInputRootFileVector(myanalysis,
				     myanalysis->GetDataFile(),, "t","px1","py1","pz1","E1");
	GPUStreamInputRootFileVector & k_minus = 
				     * new GPUStreamInputRootFileVector(myanalysis,
				     myanalysis->GetDataFile(),, "t","px2","py2","pz2","E2");
\endcode
Add the filenames for the MC information (it is assumed it is saved at the same location in the trees as for the data.
If you have additional files e.g. for systmeatics, just add them with a higher index
\code
	k_plus.SetFilename(myanalysis->GetMCFile(),myanalysis->GetMCIndex());
	k_minus.SetFilename(myanalysis->GetMCFile(),myanalysis->GetMCIndex());
\endcode

\section exWeights Event Weights

We can use weights for the data events, e.g. to do a background subtraction. Here we just set the weights to 1 for all
data used. For different options, see GPUPartialWaveAnalysis::SetEventWeights(). Please note that this needs to be done 
after we specify the input files, as the framework needs to know the number of events contained in these.
The second argument is the index of the dataset; i.e. if we wanted to use weighted MC, we would use index 1 instead.
\code
	myanalysis->SetEventWeights(1.0, 0);
\endcode


\section extensors Tensor Manipulation

One of the strengths of the GPUPWA package is that it provides GPU assisted tensor manipulation. You as the user do not 
have to think about the details of tensor algebra, GPUPWA does it for you. And because C++ allows for operator overloading,
the notation is also rather simple. So let's do some calculations:

First some constant ingredients: The metric Tensor \f$ g_{\mu\nu} \f$ (we use a -1,-1,-1,1 metric) is provided by GPUMetricTensor
\code
	GPUMetricTensor & g = * new GPUMetricTensor();
\endcode 
And the four-vector of the J/psi,\f$p_{\psi}\f$. Note that Brook provides short vectors of elementary data types with up to four elements.
We will most commonly use four-vectors of floats which are called float4.
\code
	float4 f_jpsi(0.0f,0.0f,0.0f,3.0969f);
\endcode
This is a constant vector, which we want to use on the GPU at some point, so we put it into a GPUConstVector. The J/psi will be needed
... in covariant ... (\f$ p_{\mu}^{\psi}\f$)
\code
	GPUConstVector & jpsi = * new GPUConstVector(f_jpsi);
\endcode
... and contravariant form - in this case, the two vectors should be identical. Note how the moveindex() function transforms a 
covariant to a contravariant vector and vice versa. (\f$ p_{\mu}^{\psi} = moveindex( p_{\psi}^{\mu})\f$ )
\code 
	GPUConstVector & Jpsi = moveindex(jpsi);
\endcode
Four-Vector of the intermediate resonance X: \f$ J/\psi \longrightarrow \gamma X\f$, \f$ X \longrightarrow K^{+}K^{-}\f$, thus
\f$ p_{\mu}^{X} =  p_{\mu}^{K^{+}} + p_{\mu}^{K^{-}} \f$
\code
	GPUStreamVector & x = k_plus + k_minus;
\endcode
Note that we just added two four vectors for every one of our events with a single line of code (to be precise: we have not added them,
but told GPUPWA to do so, whenever x is needed). The complete (and very long list) of things that you can do with GPUTensor objects can be found in \ref GPUComputedTensor.h.

The rest of the momentum and energy is in the photon: \f$ p_{\mu}^{\gamma} =  p_{\mu}^{\psi} - p_{\mu}^{X}\f$:
\code
	GPUStreamVector & gamma = jpsi - x;
\endcode
and again the contravariant form \f$ p^{\mu}_{\gamma}\f$
\code
	GPUStreamVector & Gamma = moveindex(gamma);
\endcode
We use the '|' charcter to denote contratctions - in the case of 4-vectors such as here, this is the scalar product. Note that all 
indices are assumed to be lower indices, apropriate metric tensors are introduced by the code, so 
\f$ p_{\mu}^{X}| p_{\mu}^{X} = p_{\mu}^{X} g_{\mu \nu} p^{\nu}_{X} \f$
\code
	GPUStreamScalar & x2 = x|x;
\endcode
... and the square root of it is the mass of the intermediate state
\code
	GPUStreamScalar & mX = sqrt(x2);
\endcode
and here we contract the gamma and x four-vectors
\code
	GPUStreamScalar & xgamma = x|gamma;
\endcode
Prepare the \f$ g_{\perp\perp}\f$ Tensor used in the contratctions (for details on the math, see Zou and Bugg, arXiv:hep-ph/0211457)
\code
	GPUStreamTensor2 & gPerpPerp_mn = g - (gamma%x +x%gamma)/(xgamma) + x2/(xgamma|xgamma)*(gamma%gamma);
\endcode
As this is needed in the contractions, we will tell the partial waves later on


\section exorbitals Orbital Tensors

Next we create two GPUOrbitalTensors objects. As it is rather tedious to calculate orbital tensors
from the momenta, these objects do this for you. Again, you need to give the analysis object in order for the
caching to work and in addition the four-momenta of the mother- and the two daughter particles.
Here we expect the lower index (covariant) vectors - for the math, see Zou and Bugg.

Orbital tensor object for \f$ X \longrightarrow K^{+}K^{-}\f$
\code
	GPUOrbitalTensors & xorbitals = * new GPUOrbitalTensors(myanalysis, x, k_plus, k_minus);
\endcode 
Orbital tensor object for \f$ J/\psi \longrightarrow \gamma X\f$
\code
	GPUOrbitalTensors & jpsiorbitals =*  new GPUOrbitalTensors(myanalysis, jpsi, gamma, x);
\endcode
Now we extract the Orbital tensors needed in the partial waves; for the scalar f0 we just have the metric tensor.
Here we have to cheat a little in order to create a stream object (with a value for every event)
from the constant metric tensor - so we just create a stream that is one for all events and multiply by this. This
is one of the few places where you as the user get into contact with some not so nice interna.
Hiding this would however require to dublicate most of our fit code - and that would not be nice
either...
\code
	GPUStreamScalar & one = *new GPUStreamScalar(myanalysis,1.0f);
	GPUStreamTensor2 & Orbital_f0_MN = g * one;
\endcode
Orbital tensors: three independent ones for the f2s
Here we get the orbital tensor from the xorbitals object
\code
	GPUStreamTensor2 &  t2_mn = xorbitals.Spin2OrbitalTensor();
\endcode
And do some index lowering and raising gymnastics; the function names are pretty self-explanatory.
\code
	GPUStreamTensor2 &  t2_MN = moveindices(t2_mn);
	GPUStreamTensor2 &  t2_mN = movelastindex(t2_mn);
	GPUStreamTensor2 &  t2_Nm = trans(t2_mN);
\endcode
The GPUOrbitalTensors object also conveniently provides Blatt-Weisskopf barrier factors
\code
	GPUStreamScalar & B2_psi_gamma_f2 = jpsiorbitals.Barrier2();
\endcode
so we end up with the complete orbital part of the amplitudes
\code
	GPUStreamTensor2 & Orbital_f2_0_MN = t2_mn;
	GPUStreamTensor2 & Orbital_f2_1_MN = -g * (((Jpsi%Jpsi)|t2_mn )* B2_psi_gamma_f2);
	GPUStreamTensor2 & Orbital_f2_2_MN = (Gamma % (t2_Nm|jpsi))*  B2_psi_gamma_f2;
\endcode
The '\%' charcter denotes the outer product of two tensors: \f$ a_{\mu}\%b_{\nu} = a_{\mu}b_{\nu} \f$.

And the same for the f4s. Note that the Rank 4 tensors involved are still under development, so you might
encounter the occasional bug when using them.
\code
	GPUStreamTensor4 &  t4_mnuv = xorbitals.Spin4OrbitalTensor();
	GPUStreamTensor4 &  t4_mnUV = moveindices(t4_mnuv);
	GPUStreamTensor4 &  t4_UVmn = trans_3412(t4_mnUV);
	GPUStreamTensor4 &  t4_mnuV = movelastindex(t4_mnuv);
	GPUStreamTensor4 &  t4_Vmnu = trans_4123(t4_mnuV);

	GPUStreamScalar &  B4_psi_gamma_f4 = jpsiorbitals.Barrier4();
	GPUStreamTensor2 & Orbital_f4_0_MN = (t4_UVmn|(jpsi%jpsi)) * B4_psi_gamma_f4;
	GPUStreamTensor2 & Orbital_f4_1_MN = g * (t4_mnuv|((jpsi%jpsi)%(jpsi%jpsi))) * B4_psi_gamma_f4;
	GPUStreamTensor2 & Orbital_f4_2_MN =  Gamma %(t4_Vmnu|(jpsi%jpsi%jpsi)) * B4_psi_gamma_f4;
\endcode	

\section expropagators Propagators

Next we create the propagators, here assumed to have a Breit-Wigner form. Arguments are
a name (which is used to read the mass and width from the ResonanceFile input file and the
mass squared at which it is to be evaluated. The input file should  contain entries of the form
\<Name\>_mass = \<Starting value\> \<Starting error\> \<lower limit\> \<upper limit\>
and \<Name\>_width = \<Starting value\> \<Starting error\> \<lower limit\> \<upper limit\>
A negative starting error will fix the parameter, limits of 999 are interpreted as no limits.

\code	
	GPUPropagatorBreitWigner & propagator1 = * new GPUPropagatorBreitWigner("f2", x2);
	GPUPropagatorBreitWigner & propagator2 = * new GPUPropagatorBreitWigner("f0", x2);
	GPUPropagatorBreitWigner & propagator3 = * new GPUPropagatorBreitWigner("f4", x2);
\endcode

In future versions, we plan to provide also propagators in the K-Matrix formalism (in the context of GPUPWA, a propagator
is something that evaluates to a complex number for each wave).

\section exwaves Building Partial Waves
	
And now we build up partial waves from the orbital and propagator parts, the third argument 
names the wave. As we are considering a radiative decay to mesons, the orbital parts are 
second rank tensors (and real, which means that the complex and the higher rank parts 
factorize) and we thus have GPUFactorizedRadiativePartialWave objects. For other analyses, 
we would use GPUScalarPartialWave or GPUVectorPartialWave. Note that the name is used to 
read starting parameters from the ParameterFile input file, which should thus
contain entries of the form \<Name\>_mag = \<Starting value\> \<Starting error\> \<lower limit\> \<upper limit\>
and \<Name\>_phase = \<Starting value\> \<Starting error\> \<lower limit\> \<upper limit\>
A negative starting error will fix the parameter, limits of 999 are interpreted as no limits.

A scalar:
\code
	GPUFactorizedRadiativePartialWave & wave0 = * new GPUFactorizedRadiativePartialWave(Orbital_f0_MN,propagator2,"f0");
\endcode
And a 2+ resonance, with three waves:
\code
	GPUFactorizedRadiativePartialWave & wave1 = * new GPUFactorizedRadiativePartialWave(Orbital_f2_0_MN,propagator1,"f20");
	GPUFactorizedRadiativePartialWave & wave2 = * new GPUFactorizedRadiativePartialWave(Orbital_f2_1_MN,propagator1,"f21");
	GPUFactorizedRadiativePartialWave & wave3 = * new GPUFactorizedRadiativePartialWave(Orbital_f2_2_MN,propagator1,"f22");
\endcode
And again the same for the 4+
\code
	GPUFactorizedRadiativePartialWave & wave4 = * new GPUFactorizedRadiativePartialWave(Orbital_f4_0_MN,propagator3,"f40");
	GPUFactorizedRadiativePartialWave & wave5 = * new GPUFactorizedRadiativePartialWave(Orbital_f4_1_MN,propagator3,"f41");
	GPUFactorizedRadiativePartialWave & wave6 = * new GPUFactorizedRadiativePartialWave(Orbital_f4_2_MN,propagator3,"f42");
\endcode

Add the waves to the partial wave analysis; for every wave added, four parameters
(magnitude, phase, mass, width) are added to the list of fit parameters.
\code
	myanalysis->GetWaves()->AddPartialWave(wave1);
	myanalysis->GetWaves()->AddPartialWave(wave2);
	myanalysis->GetWaves()->AddPartialWave(wave3);
	myanalysis->GetWaves()->AddPartialWave(wave0);
\endcode
If we feel lucky we can also add the 4+ waves;
\code
	/*myanalysis->GetWaves()->AddPartialWave(wave4);
	myanalysis->GetWaves()->AddPartialWave(wave5);
	myanalysis->GetWaves()->AddPartialWave(wave6);*/
\endcode

As we have a radiative partial wave analysis here, where contraction need an extra tensor, we have
to pass this tensor to the waves - as it is a static member, it is sufficient to pass it to one wave
\code
	wave0.SetGPerpStream(&gPerpPerp_mn);
\endcode
Here we should see that there are indeed four waves in the analysis and everything up to now has 
worked ok. Checking for things out of the expected is so far not a strength of the framework,
sanity checks and error reporting clearly have to be improved.
\code
	cout << "Active waves: " << myanalysis->GetWaves()->GetNActiveWaves() << endl;
\endcode

And now, we are ready to run - so lets check how long this took... Note that up to now, nothing has been
calculated; just the structure of the analysis has been stored.
\code
	clock_t startup = clock();
\endcode

\section exmcintegral Monte Carlo Integral

Here we perform the preparations for the Monte Carlo Integral calculation.
This will read the MC file, compute and sum all amplitude and interference
terms and write them to a file. This has to be called only once for a constant set
of resonances, as long as their masses and widths are not changed - so usually you 
would invoke this call not everytime you run your program. Note how the work we have 
done up to now and the power of the framework allow us to do the MC treatment in 
just one line of code.
\code
	myanalysis->MCIntegral();
\endcode	
Reset the cache for the MC (at index 1) in order to free some memory. Sorry that we
have to bother you as an user with this, but that is how it is for the moment.
\code
	myanalysis->Reset(1);
\endcode	
Print how long all this took...
\code
	clock_t mcend = clock();
	cout << "Startup: " << (startup-start) << " ticks = " <<  (float)(startup-start)/(float)CLOCKS_PER_SEC << " s" << endl;
	cout << "MC: " << (mcend-startup) << " ticks = " <<  (float)(mcend-startup)/(float)CLOCKS_PER_SEC << " s" << endl;
\endcode

\section exfit Doing the PWA Fit

Now we can do the fit. Currently you can use either of the following fitters:
- FUMILI (the Minuit2 implementation,
- OLDFUMILI (the BES II implementation, in general requires fewest iterations),
- MINUIT (with numerical gradients),
- MINUITGRAD (with analytical gradients,
- MINUITMINOS (MNUIT (numerical gradients) followed by a modified MINOS error estimation)

If you feel like using a different fitter, just uncomment the corresponding line. MINUIT
iterations are usually faster, but way more numerous than in the FUMILI fitters.
\code	
	myanalysis->DoFit(GPUPartialWaveAnalysis::OLDFUMILI);
	//	myanalysis->DoFit(GPUPartialWaveAnalysis::FUMILI);
	//	myanalysis->DoFit(GPUPartialWaveAnalysis::MINUIT);
	//	myanalysis->DoFit(GPUPartialWaveAnalysis::MINUITGRAD);
	//	myanalysis->DoFit(GPUPartialWaveAnalysis::MINUITMINOS);
\endcode
Here we should add some code that saves the fit results (together with the input used) to a file. This will be added soon.
And again we would like to now how long the fit took. Note that the single line of code above will do all of the following:
- Read the MC Integral coefficients from a file if necessary
- Read in the data files
- Create a lookup table to be used in the fit from the data
- Do a fit, in case of FUMILI including analytical gradients and hessian
- Report the fit results

And as everyone wants to know just how fast this is, we just tell them:
\code
	clock_t fitend = clock();
	cout << "Fit: " << (fitend-mcend) << " ticks = " <<  (float)(fitend-mcend)/(float)CLOCKS_PER_SEC << " s" << endl;
\endcode

\section explot Doing Plots and Projections

Now that our fit has hopefully converged, we of course want to see how the results compare to the data, so lets do a few plots.

First we reset the cache for the Data (at index 0) in order to free some memory on the GPU.
\code
	myanalysis->Reset(0);
\endcode

We would like to plot some projections for the fit results. For this we need event-wise differential
x-sections for the Monte Carlo, which we are going to generate with the following line. The boolean argument denotes
whether the interference terms should also be calculated and later plotted. This function will be sped up by a factor
of 4 for one of the coming versions.
\code
	float ** dcs = myanalysis->GetMCDcs(true);
\endcode
Any GPUStreamScalar can be plotted, we are going to create a few of these objects now.
\code
 	GPUStreamScalar &ct_g=costheta(gamma);
\endcode
.. yes, we can also rotate and boost vectors - this is of course meaningless for covariant amplitudes, but nice for
plotting, which we do in a particular reference system.
\code
	GPUStreamVector & kr= lorentzrotation(k_plus,x);
 	GPUStreamVector & xr= lorentzrotation(x,x);
	GPUStreamVector & kb= lorentzboost(kr,xr);
 	GPUStreamScalar &ct_k=costheta(kb);
	GPUStreamScalar &ph_k=phi(kb);
\endcode
Next we create a set of plots, a GPUPlotset, which takes care of the formatting and file handling.
\code
	GPUPlotset * plotset = new GPUPlotset();
\endcode
For the following, we will also need to know, how many waves there are.
\code
	int nwaves =  myanalysis->GetWaves()->GetNActiveWaves();
\endcode
And then we add plots.
The GPUStreamScalar::Plot() function generates a vector of root histograms (TH1F). Arguments are:
- Plot name (used for acces in root files)
- Plot title (used for dispalying). In the title, titles for the x and y axis can be given after semicolons
- Number of bins
- Axis low
- Axis high
- Array with the MC differential cross sections
- Number of waves
- Whether or not to plot the off-diagonal (interference) elements. If true, the dcs array also has to contain
the interference terms

\code
	plotset->AddPlots(mX.Plot("mass","mass;mX [GeV]",50,1.5,2.5,dcs, nwaves,true));
	plotset->AddPlots(ct_g.Plot("cos_theta_g","cos theta of gamma in J/psi;cos theta(gamma) ",50,-1,1,dcs, nwaves, true));
	plotset->AddPlots(ct_k.Plot("cos_theta_K","cos theta of K in X;cos theta(K) ",20,-1,1,dcs, nwaves,true));
	plotset->AddPlots(ph_k.Plot("phi_K","phi of K in X;phi(K) ",20,0,3.1416,dcs, nwaves,true));
\endcode
Nicely format the plots (root defaults are REALLY UGLY!)
\code
	plotset->Format();
\endcode
Write a postscript file with the plots. The second and third argument are currently ignored, but could be used for formatting.
This should of course be fixed.
\code
	plotset->WritePsfile("testout1.ps",1,1);
\endcode
Also write a rootfile with the plots
\code
	plotset->WriteRootfile("testout1.root");
\endcode

And a final word on the timing:
\code	
	clock_t plotend = clock();
	cout << "Plots: " << (plotend-fitend) << " ticks = " << (float)(plotend -fitend)/(float)CLOCKS_PER_SEC << " s" << endl;


	clock_t end = clock();
	cout << "Overall: " << (end-start) << " ticks = " <<  (float)(end-start)/(float)CLOCKS_PER_SEC << " s" << endl;
\endcode
And we are done
\code
	return 0;
}

\endcode
**/